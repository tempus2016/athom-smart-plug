substitutions:
  name: "athom-smart-plug"
  friendly_name: "Athom Smart Plug"
  project_name: "athom.smart-plug"
  project_version: "1.0"
  relay_restore_mode: RESTORE_DEFAULT_OFF

esphome:
  name: "${name}"
  name_add_mac_suffix: true
  project:
    name: "${project_name}"
    version: "${project_version}"

esp8266:
  board: esp8285
  restore_from_flash: true

api:

ota:

logger:

web_server:
  port: 80

wifi:
  ap: {} # This spawns an AP with the device name and mac address with no password.

captive_portal:

time:
  - platform: homeassistant
    id: homeassistant_time

binary_sensor:
  - platform: status
    name: "${friendly_name} Status"

  - platform: gpio
    pin:
      number: 3
      mode: INPUT_PULLUP
      inverted: true
    name: "${friendly_name} Power Button"
    disabled_by_default: true
    on_multi_click:
      - timing:
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - switch.toggle: relay
      - timing:
          - ON for at least 4s
        then:
          - button.press: restart_button

sensor:
  - platform: hlw8012
    sel_pin:
      number: GPIO12
      inverted: True
    cf_pin: GPIO4
    cf1_pin: GPIO5
    voltage_divider: 780
    current:
      name: "${friendly_name} Current"
      id: ${name}_current
    voltage:
      name: "${friendly_name} Voltage"
      id: ${name}_voltage
    power:
      name: "${friendly_name} Power"
      id: ${name}_power
      unit_of_measurement: W
    change_mode_every: 1
    update_interval: 5s

  - platform: total_daily_energy
    name: "${friendly_name} Energy Used Today"
    power_id: ${name}_power
    unit_of_measurement: kWh
    accuracy_decimals: 3
    restore: true
    min_save_interval: 180s
    filters:
      - multiply: 0.001
      
  - platform: wifi_signal
    name: "${friendly_name} Wifi Signal"
    update_interval: 60s
      
  - platform: uptime
    name: "${friendly_name} Uptime"
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();


button:
  - platform: restart
    id: restart_button
    name: "${friendly_name} Restart"

switch:
  - platform: gpio
    name: "${friendly_name}"
    pin: GPIO14
    id: relay
    restore_mode: ${relay_restore_mode}
    on_turn_on:
      - light.turn_on: blue_led

    on_turn_off:
      - light.turn_off: blue_led

light:
  - platform: status_led
    name: "${friendly_name} Status LED"
    id: blue_led
    disabled_by_default: true
    pin:
      inverted: true
      number: GPIO13

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP Address"
    ssid:
      name: "${friendly_name} Connected SSID"
    mac_address:
      name: "${friendly_name} Mac Wifi Address"
      
  - platform: template
    name: "${friendly_name} Uptime Human Readable"
    id: uptime_human
    icon: mdi:clock-start
